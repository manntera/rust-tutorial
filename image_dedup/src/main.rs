use anyhow::Result;
use std::path::Path;

// ‰∏¶ÂàóÂá¶ÁêÜAPI„Çí„Ç§„É≥„Éù„Éº„Éà
use image_dedup::{
    image_loader::standard::StandardImageLoader,
    perceptual_hash::dct_hash::DCTHasher,
    storage::local::LocalStorageBackend,
    processing::{
        ProcessingEngine,
        DefaultProcessingConfig,
        ProcessingConfig,
        ConsoleProgressReporter,
        StreamingJsonHashPersistence,
    },
};

#[tokio::main]
async fn main() -> Result<()> {
    println!("üöÄ ÁîªÂÉèÈáçË§áÊ§úÂá∫„ÉÑ„Éº„É´ - ‰∏¶ÂàóÂá¶ÁêÜÁâà");
    
    // 1. Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™Ë®≠ÂÆö
    let target_dir = std::env::args().nth(1).unwrap_or_else(|| ".".to_string());
    let output_file = Path::new(&target_dir).join("image_hashes.json");
    
    println!("üìÇ ÂØæË±°„Éá„Ç£„É¨„ÇØ„Éà„É™: {target_dir}");
    println!("üìÑ Âá∫Âäõ„Éï„Ç°„Ç§„É´: {}", output_file.display());
    
    // 2. ‰∏¶ÂàóÂá¶ÁêÜ„Ç®„É≥„Ç∏„É≥ÊßãÁØâ
    let engine = ProcessingEngine::new(
        StandardImageLoader::with_max_dimension(512), // ÁîªÂÉè„É™„Çµ„Ç§„Ç∫Ë®≠ÂÆö
        DCTHasher::new(8), // 8x8 DCT„Éè„ÉÉ„Ç∑„É•
        LocalStorageBackend::new(),
        DefaultProcessingConfig::default()
            .with_max_concurrent(num_cpus::get() * 2) // CPUÊï∞x2„ÅÆ‰∏¶ÂàóÂ∫¶
            .with_batch_size(50) // „Éê„ÉÉ„ÉÅ„Çµ„Ç§„Ç∫50
            .with_progress_reporting(true), // ÈÄ≤ÊçóÂ†±ÂëäÊúâÂäπ
        ConsoleProgressReporter::new(), // „Ç≥„É≥„ÇΩ„Éº„É´Âá∫Âäõ
        StreamingJsonHashPersistence::new(&output_file), // „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞JSONÂá∫Âäõ
    );
    
    println!("‚öôÔ∏è  Ë®≠ÂÆö:");
    println!("   - ÊúÄÂ§ß‰∏¶ÂàóÊï∞: {}", engine.config().max_concurrent_tasks());
    println!("   - „Éê„ÉÉ„ÉÅ„Çµ„Ç§„Ç∫: {}", engine.config().batch_size());
    println!("   - „Éê„ÉÉ„Éï„Ç°„Çµ„Ç§„Ç∫: {}", engine.config().channel_buffer_size());
    
    // 3. ‰∏¶ÂàóÂá¶ÁêÜÂÆüË°å
    let start_time = std::time::Instant::now();
    
    match engine.process_directory_with_config(
        &target_dir,
        engine.config(),
        engine.reporter(),
        engine.persistence(),
    ).await {
        Ok(summary) => {
            let elapsed = start_time.elapsed();
            
            println!("\n‚úÖ Âá¶ÁêÜÂÆå‰∫Ü!");
            println!("üìä Âá¶ÁêÜÁµêÊûú:");
            println!("   - ÂØæË±°„Éï„Ç°„Ç§„É´Êï∞: {}", summary.total_files);
            println!("   - ÊàêÂäüÂá¶ÁêÜÊï∞: {}", summary.processed_files);
            println!("   - „Ç®„É©„ÉºÊï∞: {}", summary.error_count);
            println!("   - Á∑èÂá¶ÁêÜÊôÇÈñì: {:.2}Áßí", elapsed.as_secs_f64());
            println!("   - Âπ≥ÂùáÂá¶ÁêÜÊôÇÈñì: {:.2}ms/„Éï„Ç°„Ç§„É´", summary.average_time_per_file_ms);
            
            if summary.error_count > 0 {
                println!("‚ö†Ô∏è  {}ÂÄã„ÅÆ„Éï„Ç°„Ç§„É´„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü", summary.error_count);
            }
            
            println!("üìÑ ÁµêÊûú„ÅØ {} „Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü", output_file.display());
        }
        Err(error) => {
            eprintln!("‚ùå „Ç®„É©„Éº: {error}");
            std::process::exit(1);
        }
    }
    
    Ok(())
}
